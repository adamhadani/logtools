name: Test python package logtools with Mysql database
    # ------------------------------------------------------------
    # (C) Alain Lichnewsky, 2021
    #
    # For running under Github's Actions
    #
    # First idea: perform tests on the VM using the default mysql provided
    # by ubuntu-latest
    #
    #    Documentation at :
    #    https://github.com/actions/virtual-environments/blob/main/images \
    #                               /linux/Ubuntu2004-README.md
    #    with following details:
    #    Mysql (client):  MySQL 8.0.25
    #    MySQL Server  : (user:root password:root)
    #        MySQL service is disabled by default. Use the following command as
    #        a part of your job to start the service:
    #                   'sudo systemctl start mysql.service'
    #
    #    Also included sqlite3 3.31.1
    #
    # ------------------------------------------------------------
    #
    # Note(s):
    # There is a more security minded example at
    # https://github.com/marketplace/actions/setup-mysql
    # which runs a Mysql in a container after shutting down the default mysql
    # Source cloned at ~/src/Github/mysql-action/.
    #
    # For substituting secrets, this scripts does it with ad-hoc shell scripts
    # another way would be to use the following Action
    # https://github.com/marketplace/actions/variable-substitution
    # ------------------------------------------------------------

on:
    workflow_dispatch:

jobs:
    build:

        runs-on: ubuntu-latest

        # Defining environment variables at this level
        env:
            # Warning: this file contains secrets that need to be handled
            #          in the  bash script. For Github repository, the secrets
            #          are accessible by any collaborator.
            ROOT_DB_PASS: ${{ secrets.MYSQL_DB_ROOT_PASS }}
            ROOT_ORIG_DB_PASS: ${{ secrets.MYSQL_DB_ROOT_ORIG_PASS }}
            USER_DB_PASS: ${{ secrets.MYSQL_DB_USER_PASS }}
            #
            # These are used in bash inline code, for consistency they are
            # global in 'build' step
            #
            createUFile: aux/.secrets/startCreateUser.sql
            rootCNFDefault: aux/.secrets/rootDft.cnf
            rootCNFFile: aux/.secrets/root.cnf
            userCNFFile: aux/.secrets/user.cnf
            #
            # Information used for filling the database
            createTblFile: aux/testData/ActionsMysqlTest/mysql/createLogtoolsTables.sql
            fillTblFile: aux/testData/ActionsMysqlTest/mysql/dumpDBData.sql

            #  From:
            #  https://docs.github.com/en/actions/reference/environment-variables
            #  ``The workspace directory is a copy of your repository if your
            #    workflow uses the actions/checkout action. If you don't use
            #    the actions/checkout action, the directory denoted in
            #    GITHUB_WORKSPACE will be empty.''
            #
            #  So using a handwired  version (TB CHECKED LATER, not modular)
            #  There are constraints on src_Dpath_path value, see below
            #
            src_Dpath_path: /home/runner/work/logtools/logtools/aux/lib/srcDpath
            AMTS_PATH: /home/runner/work/logtools/logtools/aux/testData/ActionsMysqlTest/scripts

        steps:
        - uses: actions/checkout@v2

        - name: Set up Python 3.8
          uses: actions/setup-python@v2
          with:
              python-version: '3.8'
              architecture: 'x64'

        # ------------------------------------------------------------
        # Later see about caching pip dependencies
        # https://docs.github.com/en/actions/guides/building-and-testing-python
        # ------------------------------------------------------------

        - name: Ascertain configuration and add some paths
          #
          #    Collect information concerning $HOME (for ~/.logtoolsrc setup)
          #    i.e. location of file loaded from Github/
          #    Also show $LANG ( Locale may be relevant in processing of dates )
          #
          run: |
            if [ ! -d ${src_Dpath_path} ] ; then
                mkdir -p ${src_Dpath_path}
            fi
            echo Home dir $HOME
            echo files at this location
            ls -ltha $HOME
            echo "+++++"
            echo Working dir $(pwd)
            echo Files at this location:
            ls -ltha
            echo "+++++"
            echo HOME: $HOME
            echo LANG: $LANG
          #  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
          #    ** here :: **
          #  pythonLocation: /opt/hostedtoolcache/Python/3.8.8/x64
          #  LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.8.8/x64/lib
          #  Working dir /home/runner/work/logtools/logtools
          #  HOME: /home/runner
          #  LANG: C.UTF-8
          #  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

        - name: Prepare for Python installs
          # We start by upgrading pip, if needed (?)
          run: |
            python -m pip install --upgrade pip setuptools wheel

        - name: Install full featured dpath from my own github repo
          # Need to load dpath from my repository; otherwise the setup.py
          # will install the default version without the special features

          # Repo information: origin/AL-addRegexp
          #      https://github.com/AlainLich/dpath-python.git
          # Using https://github.com/actions/checkout for all required
          # information on actions/checkout@v2

          uses: actions/checkout@v2
          with:
              # Repository name with owner. For example, actions/checkout
              # Default: ${{ github.repository }}
              repository: 'AlainLich/dpath-python'

              # The branch, tag or SHA to checkout. When checking out the
              # repository that triggered a workflow, this defaults to the
              # reference or SHA for that event. Otherwise, uses the default
              # branch.
              ref: 'AL-addRegexp'

              # Absolute path to place the repository. There seems to be
              # constraints, as I received an error "... is not under ..."
              # See https://github.com/actions/checkout
              # and more specifically https://github.com/actions/checkout/issues/197
              #    `` Today the path input is the only way to change the directory
              #       where the code is cloned. Also there is a restriction that it
              #       must be under GITHUB_WORKSPACE. ''
              # See Feature Request https://github.com/actions/checkout/issues/327
              #
              path: ${{ env.src_Dpath_path }}

        - name: Install dpath with config

          run: |
            cd ${src_Dpath_path}
            echo Files in the dpath directory $(pwd) just loaded
            ls -ltha
            python setup.py install
            if [ $? -eq 0 ] ; then
                echo Installed dpath successfully in ${src_Dpath_path}
                ls -ltha ${src_Dpath_path}
            else
                echo FAILURE IN INSTALLATION OF dpath
            fi

        - name: Install logtools with config.py
          if: always()
          run: |
            pwd
            ls -ltha
            python setup.py install
            if [ $? -eq 0 ] ; then
                echo Installed logtools successfully
            else
                echo FAILURE IN INSTALLATION OF logtools
            fi


        - name: Install other python dependencies
          if: always()
          # Take into account the requirements and setup.py built in
          # dependencies.
          # Also needed for testing purposes: pymysql
          #
          run: |
            echo installing logtools requirements
            if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
            #
            echo installing extra test requirements
            testsDBReq=${AMTS_PATH}/testsDB.requirements
            if [ -f ${testsDBReq}  ]; then pip install -r ${testsDBReq} ; fi

        - name: Install .logtoolsrc
          if: always()
          #
          #     File ~/.logtoolsrc is used by the package to setup defaults
          #      - absence results in failure;
          #      - file name may be overriden by  env. variable LOGTOOLS_RC
          #      - it contains filepaths and secret passwd and thus must be adapted
          #        to actuals filepaths
          #      -file may name other config files that must
          #        exist with proper contents. In particular this test
          #        uses ~/.logtools.d/tradivariantParsing.txt

          run: |
            echo executing: "aux/dot_logtoolsrc.sh $(pwd) ${HOME}/.logtoolsrc ${HOME}/.logtools.d"
            aux/dot_logtoolsrc.sh $(pwd) "${HOME}/.logtoolsrc" "${HOME}/.logtools.d"
            echo Files in  home dir: "$HOME"
            ls -ltha ~
            echo Files in  home dir: "$HOME/.logtools.d"
            ls -ltha ~/.logtools.d

        - name: Confirm list of available docker images
          if: always()
          #
          #  These are to be used as source of data via inspect in script
          #  testDB.sh
          #
          run: |
            echo "Available docker images"
            docker image ls -a
            echo "----------------"

        - name: Launch and configure Mysql server
          if: always()
          #  This starts the service and preloads authorizations so that non
          #  root access may occur. Also need to:
          #    1/ set user privileges, by editing and running
          #       aux/testData/ActionsMysqlTest/mysql/startCreateUser.sql
          #
          #    2/ preload any data that we want to be in database tables
          #       a) table: define fields and preload data
          #       b) table: define fields, should be able to start cold (test)
          #
          run: |
            sudo systemctl start mysql.service
            #
            #
            # Sleep so that the mysql server gets a chance to get started
            # service mysqld status. To get some info :
            #
            #   1) check if the service got started
            #      systemctl status cron.service
            #
            #   2) this shows possible values
            #      systemctl --state=help
            #   3) this lists sockets being waited on/serviced
            #      systemctl list-sockets --all
            #
            sleepStep=1
            sleep ${sleepStep}
            # wait a bit for the mysql server to get started if required
            for i in {1..60} ; do
                activity=$(systemctl is-active mysql)
                if [ ${activity} = "active" ] ; then
                   echo Mysql service active at iter $i : $(expr ${i} \* ${sleepStep} )s
                   break
                fi
                sleep ${sleepStep}
            done
            #
            # Now run the configuration script and inject the data with mysql
            # client.
            #   Arg1: BASEPATH
            #   Arg2: location of generated file (with secrets) (create a hidden
            #         directory to contain secrets)!
            maskOrig=$(umask -p)
            umask 0077
            mkdir aux/.secrets
            # reset umask
            $maskOrig
            #
            # This will prepare for user creation in Mysql, set privileges,
            # the port is 3306.
            aux/mysql_config.sh ${createUFile} \
               ${rootCNFFile} ${rootCNFDefault} \
               ${userCNFFile}
            #
            # Concerning passwords man (mysql client ) says:
            #  To avoid giving the password on the command line, use an option
            #  file. See Section 6.1.2.1, “End-User Guidelines for Password
            #  Security”.
            #
            # Selected to hide the default root password in yet another secret!
            # WATCH OUT: here must use root default password
            # ALSO NOTE that the options used to specify option files must
            # precede any other options
            mysql  --defaults-file=${rootCNFDefault} -u root <${createUFile}
            #
            # now, inject the table structure and data connecting as a user
            # with the secret password.
            #
            cat ${createTblFile} ${fillTblFile} | \
                mysql --defaults-file=${userCNFFile} -u user


        - name: Non Database Tests
          if: always()
          #     Test Z : runs logtools/test/test_logtools.py
          #     Test A : runs a test scenario
          #     Test + : runs all tests
          #
          #     These are redundant, ordered by increasing dependency on the
          #     environment: Z:self contained, A requires 1 data file,
          #
          #     Parameter -s ZZZ indicates logging level; INFO, ERROR and DEBUG
          #     are of interest
          #     Environment variables: documented in aux/manTests.py
          #     Note that if DEBUG not set, some tests suppress error output
          #
          #     Configuration:
          #            This uses ~/.logtoolsrc
          #                 and this file may name other config files that must
          #                 exist with proper contents. In particular this test
          #                 uses ~/.logtools.d/tradivariantParsing.txt
          #
          run: |
            export ZTESTPGM="logtools/test/test_logtools.py"
            export TESTDATADIR="aux/testData"
            export DEBUG="-"
            python aux/manTests.py Z -s INFO
            python aux/manTests.py A -s ERROR
            python aux/manTests.py + -s INFO

        - name: Mysql Tests
          if: always()
          #
          #   testDB.sh with parameter sets
          #
          run: |
            export PATH=${PATH}:${AMTS_PATH}
            echo PATH "${PATH}"
            hash -r
            # ----------------------------------
            # warn user: testsDB.sh may pull a docker image
            echo testsDB may pull docker image to be inspected to generate JSON
            # ----------------------------------
            testsDB.sh -s sDBJ
            testsDB.sh -s sDBOP

        - name: Dump Values in database
          if: always()
          # Using SELECT sql verb rather than mysqldump, since we are only
          # getting the log back, and this seems easier to read.
          # Also, only table 'tree' gets modified / filled
          run: |
            echo "USE logfromtool; SELECT * FROM tree;" |
                mysql --defaults-file=${userCNFFile} -u user
            echo dumped logfromtool.tree

        - name: Close mysql server
          if: always()
          #
          # This will probably occur anyways, or not be required since VM
          # gets destroyed. This way, I experiment to check how this works....
          run: |
            sudo systemctl status mysql.service
            sudo systemctl stop mysql.service
